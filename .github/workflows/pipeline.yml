name: Test

# triggers on
on: [push]

jobs:
  test:
    env:
      RAILS_ENV: test
      NODE_ENV: test
    runs-on: ubuntu-latest # runner
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports: ['6379:6379']
        options: --entrypoint redis-server
    steps:
      - name: Checkout repository # copies repo in runner
        uses: actions/checkout@v2 # short for https://github.com/actions/checkout
      - name: Set up Ruby # short for https://github.com/ruby/setup-ruby
        uses: ruby/setup-ruby@v1
        with:
          # runs 'bundle install' and caches installed gems automatically
          bundler-cache: true
          ruby-version: 2.7.3
      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Get Yarn cache directory path
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Setup cache key and directory for node_modules cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Yarn install
        run: yarn install --frozen-lockfile
      - name: Prepare DB
        run: |
          cp config/database.github.yml config/database.yml
          bundle exec rails db:create db:migrate
      - name: Run model tests
        run: bundle exec rails test
      - name: Run system tests
        run: bundle exec rails test:system

  Deploy:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master
      - name: Deploy To Heroku
        uses: akhileshns/heroku-deploy@v3.6.8 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: 'saver-productivity-manager' #Must be unique in Heroku
          heroku_email: 'nicholas_ang@outlook.com'
